/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// MemoryBumpUpApplyConfiguration represents a declarative configuration of the MemoryBumpUp type for use
// with apply.
type MemoryBumpUpApplyConfiguration struct {
	ApplyImmediately *string `json:"applyImmediately,omitempty"`
	Period           *string `json:"period,omitempty"`
	Percent          *string `json:"percent,omitempty"`
	Min              *string `json:"min,omitempty"`
	Max              *string `json:"max,omitempty"`
}

// MemoryBumpUpApplyConfiguration constructs a declarative configuration of the MemoryBumpUp type for use with
// apply.
func MemoryBumpUp() *MemoryBumpUpApplyConfiguration {
	return &MemoryBumpUpApplyConfiguration{}
}

// WithApplyImmediately sets the ApplyImmediately field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ApplyImmediately field is set to the value of the last call.
func (b *MemoryBumpUpApplyConfiguration) WithApplyImmediately(value string) *MemoryBumpUpApplyConfiguration {
	b.ApplyImmediately = &value
	return b
}

// WithPeriod sets the Period field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Period field is set to the value of the last call.
func (b *MemoryBumpUpApplyConfiguration) WithPeriod(value string) *MemoryBumpUpApplyConfiguration {
	b.Period = &value
	return b
}

// WithPercent sets the Percent field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Percent field is set to the value of the last call.
func (b *MemoryBumpUpApplyConfiguration) WithPercent(value string) *MemoryBumpUpApplyConfiguration {
	b.Percent = &value
	return b
}

// WithMin sets the Min field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Min field is set to the value of the last call.
func (b *MemoryBumpUpApplyConfiguration) WithMin(value string) *MemoryBumpUpApplyConfiguration {
	b.Min = &value
	return b
}

// WithMax sets the Max field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Max field is set to the value of the last call.
func (b *MemoryBumpUpApplyConfiguration) WithMax(value string) *MemoryBumpUpApplyConfiguration {
	b.Max = &value
	return b
}
